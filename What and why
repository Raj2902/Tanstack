### **Step 1: What is TanStack Query?**  

TanStack Query (formerly React Query) is a powerful data-fetching and state management library that helps you handle API requests efficiently. It provides **caching, background synchronization, pagination, and more**, making data management easier in Angular applications.  

---

### **Why Use TanStack Query in Angular?**  
Angular already has **HttpClient** for API calls, but it **does not handle caching, retries, background updates, or automatic state management**. TanStack Query does all of this with minimal code.  

#### **Advantages of TanStack Query in Angular:**
1. **Automatic Caching** üóÑÔ∏è  
   - Stores fetched data and reuses it, reducing API calls.
   
2. **Automatic Background Updates** üîÑ  
   - Refetches data in the background to keep UI fresh.
   
3. **Retry on Failure** üîÑ  
   - Automatically retries failed requests with exponential backoff.
   
4. **Easy Pagination & Infinite Scrolling** üìú  
   - Helps with paginated API requests.
   
5. **Optimistic Updates** ‚ö°  
   - Makes UI feel faster by updating UI before API response.

---

### **Installing TanStack Query in Angular**
Let's set up TanStack Query in your Angular project.

#### **Step 1: Install Dependencies**  
Run the following command in your Angular project (inside the newly created angular add after using the command ng new <app-name>):
npm i @tanstack/angular-query-experimental

#### **Step 2: Import `provideTanStackQuery` in `app.config.ts`**

import { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';
import { provideRouter } from '@angular/router';

import { routes } from './app.routes';
import { provideTanStackQuery, QueryClient } from '@tanstack/angular-query-experimental';
import { provideHttpClient } from '@angular/common/http';

const queryClient = new QueryClient();

export const appConfig: ApplicationConfig = {
  providers: [provideHttpClient(),provideTanStackQuery(queryClient),provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes)]
};


```
Step 3: Create a Service to Fetch Data
Since Angular uses services for API calls, we integrate TanStack Query inside a service.

Generate the Service
Run this command to create a new service:

ng generate service services/pokemon

Now, open src/app/services/pokemon.service.ts and update it:

import { Injectable, inject } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { lastValueFrom } from 'rxjs';

@Injectable({
  providedIn: 'root',
})
export class PokemonService {
  private http = inject(HttpClient);
  private apiUrl = 'https://pokeapi.co/api/v2/pokemon?limit=10';

  pokemons() {
    return lastValueFrom(this.http.get(this.apiUrl));
  }
}

‚úÖ Breakdown of what we did:

Injected HttpClient to make API requests.

Created fetchPokemons() to fetch Pok√©mon data using TanStack Query.

Used lastValueFrom() from RxJS to convert the Observable to a Promise.



‚úÖ Now, TanStack Query is set up in your Angular app!  

---

Next Step: Fetch and Display Data in a Component
Now that we have the service, in the next lesson, we'll fetch data in a component and display it in the UI using Angular 19's Standalone API. Ready to move forward? üöÄ
