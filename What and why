### **Step 1: What is TanStack Query?**  

TanStack Query (formerly React Query) is a powerful data-fetching and state management library that helps you handle API requests efficiently. It provides **caching, background synchronization, pagination, and more**, making data management easier in Angular applications.  

---

### **Why Use TanStack Query in Angular?**  
Angular already has **HttpClient** for API calls, but it **does not handle caching, retries, background updates, or automatic state management**. TanStack Query does all of this with minimal code.  

#### **Advantages of TanStack Query in Angular:**
1. **Automatic Caching** 🗄️  
   - Stores fetched data and reuses it, reducing API calls.
   
2. **Automatic Background Updates** 🔄  
   - Refetches data in the background to keep UI fresh.
   
3. **Retry on Failure** 🔄  
   - Automatically retries failed requests with exponential backoff.
   
4. **Easy Pagination & Infinite Scrolling** 📜  
   - Helps with paginated API requests.
   
5. **Optimistic Updates** ⚡  
   - Makes UI feel faster by updating UI before API response.

---

### **Installing TanStack Query in Angular**
Let's set up TanStack Query in your Angular project.

#### **Step 1: Install Dependencies**  
Run the following command in your Angular project:
npm install @tanstack/query-core

#### **Step 2: Import `QueryClientModule` in `app.config.ts`**

import { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';
import { provideRouter } from '@angular/router';

import { routes } from './app.routes';
import { QueryClient } from '@tanstack/query-core';
import { provideHttpClient } from '@angular/common/http';

const queryClient = new QueryClient();

export const appConfig: ApplicationConfig = {
  providers: [provideHttpClient(), { provide: QueryClient, useValue: queryClient }, provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes)]
};

```
Step 3: Create a Service to Fetch Data
Since Angular uses services for API calls, we integrate TanStack Query inside a service.

Generate the Service
Run this command to create a new service:

ng generate service services/pokemon

Now, open src/app/services/pokemon.service.ts and update it:

import { Injectable, inject } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { QueryClient } from '@tanstack/query-core';

@Injectable({
  providedIn: 'root',
})
export class PokemonService {
  private http = inject(HttpClient);
  private queryClient = inject(QueryClient);
  private apiUrl = 'https://pokeapi.co/api/v2/pokemon?limit=10';

  fetchPokemons() {
    return this.queryClient.fetchQuery({
      queryKey: ['pokemons'],
      queryFn: () => this.http.get(this.apiUrl).toPromise(),
    });
  }
}

✅ Breakdown of what we did:

Injected HttpClient to make API requests.

Injected QueryClient for caching and data fetching.

Created fetchPokemons() to fetch Pokémon data using TanStack Query.



✅ Now, TanStack Query is set up in your Angular app!  

---

Next Step: Fetch and Display Data in a Component
Now that we have the service, in the next lesson, we'll fetch data in a component and display it in the UI using Angular 19's Standalone API. Ready to move forward? 🚀
