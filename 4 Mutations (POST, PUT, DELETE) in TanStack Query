Now that we can fetch data, let's learn how to mutate data using TanStack Query in Angular.

Mutations allow us to:
✅ POST (Create new data)
✅ PUT/PATCH (Update existing data)
✅ DELETE (Remove data)
✅ GET (Single data)

Open the Post Service ts file created in prev chapter

Step 1: Modify PostService

import { HttpClient } from '@angular/common/http';
import { inject, Injectable } from '@angular/core';
import { lastValueFrom } from 'rxjs';

@Injectable({
  providedIn: 'root',
})
export class PostService {
  private http = inject(HttpClient);
  private apiUrl = 'http://localhost:3000/posts';

  constructor() {}

  createPost(post: any) {
    return lastValueFrom(this.http.post(this.apiUrl, post));
  }

  posts() {
    return lastValueFrom(this.http.get(this.apiUrl));
  }

  updatePost(post: any, id: string) {
    return lastValueFrom(this.http.put(`${this.apiUrl}/${id}`, post));
  }

  deletePost(id: string) {
    return lastValueFrom(this.http.delete(`${this.apiUrl}/${id}`));
  }
  getPost(id: string) {
    return lastValueFrom(this.http.get(`${this.apiUrl}/${id}`));
  }
}


Step 2 : Update the app Component ts

import { Component, inject } from '@angular/core';
import {
  injectMutation,
  injectQuery,
  QueryClient,
} from '@tanstack/angular-query-experimental';
import { PostService } from './services/post.service';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-root',
  imports: [CommonModule, FormsModule],
  templateUrl: './app.component.html',
  styleUrl: './app.component.css',
})
export class AppComponent {
  title = 'ang-tanstack';
  search: string = '';

  postSrv = inject(PostService);
  queryClient = inject(QueryClient);

  query = injectQuery(() => ({
    queryKey: ['posts'],
    queryFn: () => this.postSrv.posts(),
  }));

  singleQuery = injectQuery(() => ({
    queryKey: ['post', this.search],
    queryFn: () => this.postSrv.getPost(this.search),
    enabled: false,
    retry: 0,
  }));

  mutation = injectMutation(() => ({
    mutationFn: (post: any) => this.postSrv.createPost(post),
    onSuccess: () =>
      this.queryClient.invalidateQueries({ queryKey: ['posts'] }),
  }));

  updatePost = injectMutation(() => ({
    mutationFn: (post: any) => this.postSrv.updatePost(post, '1'),
    onSuccess: () =>
      this.queryClient.invalidateQueries({ queryKey: ['posts'] }),
  }));

  deletePost = injectMutation(() => ({
    mutationFn: (post: any) => this.postSrv.deletePost('1'),
    onSuccess: () =>
      this.queryClient.invalidateQueries({ queryKey: ['posts'] }),
  }));

  createPost() {
    this.mutation.mutate({ title: 'new post', body: 'content of new post' });
  }

  updateMutation() {
    this.updatePost.mutate({ title: 'new post', body: 'content of new post' });
  }

  deleteMutation() {
    this.deletePost.mutate(1);
  }

  getQuery() {
    this.singleQuery.refetch();
  }
}



Step 3 : Update the app component html

<h2>Posts data</h2>

<p *ngIf="query.isPending()">Loading...</p>
<p *ngIf="query.error()">{{ query.error()?.message }}</p>

<input
  type="text"
  placeholder="search by id"
  [(ngModel)]="search"
  (change)="getQuery()"
/>
<p>Searched result</p>
<p *ngIf="singleQuery.isFetching()">Loading...</p>
<p *ngIf="singleQuery.error()">{{ singleQuery.error()?.message }}</p>

<pre *ngIf="!singleQuery.error() && singleQuery.data() as data">{{
  data | json
}}</pre>

<button (click)="deleteMutation()">Delete</button>
<button (click)="updateMutation()">Update</button>
<button (click)="createPost()">Create</button>
<pre *ngIf="query.data() as data">{{ data | json }}</pre>

