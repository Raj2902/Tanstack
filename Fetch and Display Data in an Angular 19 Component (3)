### **Step 4: Fetch and Display Data in an Angular 19 Component**  

Now that our **PostService** is ready, let's use it inside a component to fetch and display data.

---

### **Step 1: Fetch Data in the Component**
Open `src/app/app.component.ts` and update it:

```ts
import { Component, inject } from '@angular/core';
import { RouterOutlet } from '@angular/router';
import { injectQuery } from '@tanstack/angular-query-experimental';
import { PostService } from './services/post.service';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-root',
  imports: [RouterOutlet,CommonModule],
  templateUrl: './app.component.html',
  styleUrl: './app.component.css'
})
export class AppComponent {
  title = 'ang-tanstack';

  postSrv = inject(PostService);

  query = injectQuery(()=>({
    queryKey:['posts'],
    queryFn:()=>this.postSrv.posts()
  }))

}

```

âœ… **What This Does:**
- **Injects `PostService`** to fetch Post data.  
- **Uses `inejctQuery`** to call `posts()` when the component loads.  
- **Handles loading, success, and error states automatically.**

---

### **Step 3: Display Data in HTML**
Now, open `src/app/app.component.html` and update it:

```html
<h2>Posts data</h2>

<p *ngIf="query.isPending()">Loading...</p>
<p *ngIf="query.error()">{{ query.error()?.message }}</p>

<pre *ngIf="query.data() as data">{{ data | json }}</pre>

```

âœ… **What This Does:**
- Shows **"Loading..."** when fetching data.
- Displays an **error message** if the request fails.
- Renders a post data when data is available.


### **Run the Application**
Now, start your Angular app with:
```sh
ng serve
```
ðŸš€ You should see posts data on the screen!  

---

### **Next Step: Mutations (POST, PUT, DELETE)**
Now that we have data fetching working, let's move to **data mutations** (adding, updating, and deleting data using TanStack Query). Are you ready to proceed? ðŸš€
